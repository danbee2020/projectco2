from PIL import Image
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Configuration de la page
st.set_page_config(
    page_title="Rapport d'Analyse",
    page_icon="üìä",
    layout="wide")


# fonction pour Charger le dataframe

df = pd.read_csv("data-2.csv")



# Sidebar pour la navigation
st.sidebar.title("üìë Table des mati√®res")
page = st.sidebar.radio("",

    ["Pr√©sentation du projet", "Exploration des Donn√©es", "Visualisations", "Mod√©lisation", "Conclusions"])


# Page Pr√©sentation du projet
if page == "Pr√©sentation du projet":
    st.title("üìãEmission de CO2 par les v√©hicules")
   

    st.image("pic-co2.jpg",caption="Mon image", width=600)
    
    st.header("Contexte")
    st.write("""L'√©mission de CO2 est une variable constamment mesur√© car elle ne contribue pas √† pr√©server notre plan√®te. """)        
    st.write("""Les √©missions de CO2 identifie les v√©hicules qui √©mettent le plus de CO2 pour identifier les caract√©ristiques techniques qui jouent un r√¥le dans la pollution. """)
    st.write("""Comme pr√©venir c'est gu√©rir pr√©dire √† l‚Äôavance cette pollution permet de pr√©venir dans le cas de l‚Äôapparition de nouveaux types de v√©hicules (nouvelles s√©ries de voitures par exemple)""")

  
    
    st.header("M√©thodologie")
    st.write("""l'analyse consistera Chargement et exploration exhaustif des donn√©es.Analyse statistique et visualisations.Machine learning.Pr√©diction du CO2. Interpr√©tabilit√© du mod√®le (SHAP) """)




# Page Exploration des Donn√©es


elif page == "Exploration des Donn√©es":
    st.title("üîç Exploration des Donn√©es")
    
    st.header("Vue d'ensemble du dataset")
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Dimensions du dataset")
        st.write(f"Nombre de lignes : {df.shape[0]}")
        st.write(f"Nombre de colonnes : {df.shape[1]}")
    
    with col2:
        st.subheader("Types des variables")
        st.write(df.dtypes)
    
        st.header("Statistiques descriptives")
        st.write(df.describe())
    
        st.header("Analyse des valeurs manquantes")
        missing_values = df.isnull().sum()
        st.write(missing_values[missing_values > 0])

# Page Visualisation
elif page == "Visualisations":
     st.title("üìà Visualisations")
    
     st.header("Distribution des variables")
    # Exemple de visualisation avec Plotly
     col = st.selectbox("S√©lectionnez une variable", df.select_dtypes(include=[np.number]).columns)
     fig = px.histogram(df, x=col, title=f"Distribution de {col}")
     st.plotly_chart(fig)
    
     st.header("Analyse des corr√©lations")
    # Matrice de corr√©lation
     corr = df.select_dtypes(include=[np.number]).corr()
     fig = px.imshow(corr, 
                    title="Matrice de corr√©lation",
                    color_continuous_scale='RdBu')
     st.plotly_chart(fig)
    
     st.header("Analyses bivari√©es")
    # Scatter plot
     x_col = st.selectbox("Variable X", df.select_dtypes(include=[np.number]).columns)
     y_col = st.selectbox("Variable Y", df.select_dtypes(include=[np.number]).columns)
     fig = px.scatter(df, x=x_col, y=y_col, title=f"{x_col} vs {y_col}")
     st.plotly_chart(fig)

# Page Mod√©lisation
elif page == "Mod√©lisation":
     st.title("ü§ñ Mod√©lisation")
    
     st.header("Pr√©paration des donn√©es")
    # Exemple avec r√©gression lin√©aire
     target = st.selectbox("Variable cible", df.select_dtypes(include=[np.number]).columns)
     features = st.multiselect("Variables explicatives",
                            [col for col in df.select_dtypes(include=[np.number]).columns 
                             if col != target])
    
     if features:
        # Pr√©paration des donn√©es
        X = df[features]
        y = df[target]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Standardisation
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        # Mod√©lisation
        model = LinearRegression()
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)
        
        # R√©sultats
        st.header("R√©sultats du mod√®le")
        st.write(f"R¬≤ Score: {r2_score(y_test, y_pred):.3f}")
        st.write(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.3f}")
        
        # Coefficients
        coef_df = pd.DataFrame({
            'Variable': features,
            'Coefficient': model.coef_
        })
        st.write("Coefficients du mod√®le:")
        st.write(coef_df)

# Page Conclusions
else:
    st.title("üìù Conclusions et Recommandations")
    
    st.header("Synth√®se des r√©sultats")
    st.write("""
    [R√©sumez ici les principales d√©couvertes de votre analyse]
    """)
    
    st.header("Recommandations")
    st.write("""
    [Listez vos recommandations bas√©es sur l'analyse]
    """)
    
    st.header("Limites et perspectives")
    st.write("""
    [Discutez des limites de l'analyse et des pistes d'am√©lioration]
    """)

# Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("Cr√©√© par [Votre Nom]")